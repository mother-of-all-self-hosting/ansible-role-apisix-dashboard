# SPDX-FileCopyrightText: 2023 - 2024 Nikita Chernyi
# SPDX-FileCopyrightText: 2023 - 2025 Slavi Pantaleev
# SPDX-FileCopyrightText: 2024 Sergio Durigan Junior
# SPDX-FileCopyrightText: 2025 MASH project contributors
# SPDX-FileCopyrightText: 2025 Suguru Hirahara
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
# Project source code URL: https://github.com/apache/apisix-dashboard

apisix_dashboard_enabled: true

apisix_dashboard_identifier: apisix-dashboard
apisix_dashboard_base_path: "/{{ apisix_dashboard_identifier }}"
apisix_dashboard_config_path: "{{ apisix_dashboard_base_path }}/config"

# renovate: datasource=docker depName=apache/apisix-dashboard versioning=semver
apisix_dashboard_version: 3.0.1

apisix_dashboard_uid: ''
apisix_dashboard_gid: ''

# The hostname at which APISIX serves its API dashboard
apisix_dashboard_hostname: ''

apisix_dashboard_scheme: https

# The path at which APISIX serves its API dashboard.
# This value must either be `/` or not end with a slash (e.g. `/apisix`).
apisix_dashboard_path_prefix: /

apisix_dashboard_container_image: "{{ apisix_dashboard_container_image_registry_prefix }}apache/apisix-dashboard:{{ apisix_dashboard_container_image_tag }}"
apisix_dashboard_container_image_tag: "{{ apisix_dashboard_version }}-alpine"
apisix_dashboard_container_image_registry_prefix: "{{ apisix_dashboard_container_image_registry_prefix_upstream }}"
apisix_dashboard_container_image_registry_prefix_upstream: "{{ apisix_dashboard_container_image_registry_prefix_upstream_default }}"
apisix_dashboard_container_image_registry_prefix_upstream_default: docker.io/
apisix_dashboard_container_image_force_pull: "{{ apisix_dashboard_container_image.endswith(':latest') }}"

# Specifies how the container publishes its HTTP port.
#
# Related to `apisix_dashboard_config_conf_listen_port`
#
# Takes an "<ip>:<port>" value (e.g. "127.0.0.1:9000"), just a port number or an empty string to not expose.
apisix_dashboard_container_http_bind_port: ''

# The base container network. It will be auto-created by this role if it doesn't exist already.
apisix_dashboard_container_network: "{{ apisix_dashboard_identifier }}"

# A list of additional container networks that the container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to another reverse proxy, which runs in a different container network.
apisix_dashboard_container_additional_networks: "{{ apisix_dashboard_container_additional_networks_auto + apisix_dashboard_container_additional_networks_custom }}"
apisix_dashboard_container_additional_networks_auto: []
apisix_dashboard_container_additional_networks_custom: []

# A list of additional "volumes" to mount in the container.
# This list gets populated dynamically at runtime. You can provide a different default value,
# if you wish to mount your own files into the container.
# Contains definition objects like this: `{"type": "bind", "src": "/outside", "dst": "/inside", "options": "readonly"}.
# See the `--mount` documentation for the `docker run` command.
apisix_dashboard_container_additional_volumes: "{{ apisix_dashboard_container_additional_volumes_auto + apisix_dashboard_container_additional_volumes_custom }}"
apisix_dashboard_container_additional_volumes_auto: []
apisix_dashboard_container_additional_volumes_custom: []

# apisix_dashboard_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the container.
# See `../templates/labels.j2` for details.
#
# To inject your own other container labels, see `apisix_dashboard_container_labels_additional_labels`.
apisix_dashboard_container_labels_traefik_enabled: true
apisix_dashboard_container_labels_traefik_docker_network: "{{ apisix_dashboard_container_network }}"
apisix_dashboard_container_labels_traefik_entrypoints: web-secure
apisix_dashboard_container_labels_traefik_tls_certResolver: default  # noqa var-naming

apisix_dashboard_container_labels_hostname: "{{ apisix_dashboard_hostname }}"
# The path prefix must either be `/` or not end with a slash (e.g. `/apisix`).
apisix_dashboard_container_labels_path_prefix: "{{ apisix_dashboard_path_prefix }}"
apisix_dashboard_container_labels_rule: "Host(`{{ apisix_dashboard_container_labels_hostname }}`){% if apisix_dashboard_container_labels_path_prefix != '/' %} && PathPrefix(`{{ apisix_dashboard_container_labels_path_prefix }}`){% endif %}"
apisix_dashboard_container_labels_priority: 0
apisix_dashboard_container_labels_entrypoints: "{{ apisix_dashboard_container_labels_traefik_entrypoints }}"
apisix_dashboard_container_labels_middlewares: []
apisix_dashboard_container_labels_tls: "{{ apisix_dashboard_container_labels_entrypoints != 'web' }}"
apisix_dashboard_container_labels_tls_certResolver: "{{ apisix_dashboard_container_labels_traefik_tls_certResolver }}"  # noqa var-naming

# apisix_dashboard_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# apisix_dashboard_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
apisix_dashboard_container_labels_additional_labels: ''

# A list of extra arguments to pass to the container
apisix_dashboard_container_extra_arguments: []

# List of systemd services that the APISIX systemd service depends on
apisix_dashboard_systemd_required_services_list: "{{ apisix_dashboard_systemd_required_services_list_default + apisix_dashboard_systemd_required_services_list_auto + apisix_dashboard_systemd_required_services_list_custom }}"
apisix_dashboard_systemd_required_services_list_default: "{{ [devture_systemd_docker_base_docker_service_name] if devture_systemd_docker_base_docker_service_name else [] }}"
apisix_dashboard_systemd_required_services_list_auto: []
apisix_dashboard_systemd_required_services_list_custom: []

# List of systemd services that the APISIX systemd service wants
apisix_dashboard_systemd_wanted_services_list: []

# Additional environment variables.
apisix_dashboard_environment_variables_additional_variables: ''

# Controls the `conf.listen.host` configuration property
apisix_dashboard_config_conf_listen_host: '0.0.0.0'

# Controls the `conf.listen.port` configuration property
apisix_dashboard_config_conf_listen_port: 9000

# Controls the `conf.allow_list` configuration property.
# If we don't set any IP list, then any IP access is allowed by default.
# The rules are checked in sequence until the first match is found.
apisix_dashboard_config_conf_allow_list: []

# Controls the `conf.etcd.endpoints` configuration property.
# A list of etcd host addresses.
#
# Example:
# apisix_dashboard_config_conf_etcd_endpoints: ['1.2.3.4:2379']
apisix_dashboard_config_conf_etcd_endpoints: []

# Controls the `conf.etcd.username` configuration property.
apisix_dashboard_config_conf_etcd_username: ''

# Controls the `conf.etcd.password` configuration property.
apisix_dashboard_config_conf_etcd_password: ''

# Controls the `conf.etcd.prefix` configuration property.
# It specifies APISIX's prefix in etcd.
apisix_dashboard_config_conf_etcd_prefix: /apisix

# Controls the `log.error_log.level` configuration property.
# Known values: debug, info, warn, error, panic, fatal
apisix_dashboard_config_conf_log_error_log_level: warn

# Controls the `authentication.secret` configuration property.
# Secret for JWT token generation.
apisix_dashboard_config_authentication_secret: ''

# Controls the `authentication.expire_time` configuration property.
# JWT token expiration time, in seconds.
apisix_dashboard_config_authentication_expire_time: 3600

# Controls the `authentication.users` configuration property.
# Credentials for login to the web UI.
# OIDC may also be enabled as an alternative.
# See `apisix_dashboard_config_oidc_enabled`
#
# Example:
# apisix_dashboard_config_authentication_users:
#   - username: admin1
#     password: secret
#   - username: admin2
#     password: secret
apisix_dashboard_config_authentication_users: []

# Controls the `oidc.enabled` configuration property.
# See an example configuration in: https://github.com/apache/apisix-dashboard/blob/master/api/conf/conf.yaml
apisix_dashboard_config_oidc_enabled: false

# Controls the `oidc.enabled` configuration property.
apisix_dashboard_config_oidc_expire_time: 3600

# Controls the `oidc.client_id` configuration property.
apisix_dashboard_config_oidc_client_id: ''

# Controls the `oidc.client_secret` configuration property.
apisix_dashboard_config_oidc_client_secret: ''

# Controls the `oidc.auth_url` configuration property.
apisix_dashboard_config_oidc_auth_url: ''

# Controls the `oidc.token_url` configuration property.
apisix_dashboard_config_oidc_token_url: ''

# Controls the `oidc.user_info_url` configuration property.
apisix_dashboard_config_oidc_user_info_url: ''

# Controls the `oidc.redirect_url` configuration property.
apisix_dashboard_config_oidc_redirect_url: ''

# Controls the `oidc.scope` configuration property.
apisix_dashboard_config_oidc_scope: openid

# Controls the `plugins` configuration property.
apisix_dashboard_config_plugins: "{{ apisix_dashboard_config_plugins_default + apisix_dashboard_config_plugins_auto + apisix_dashboard_config_plugins_custom }}"
apisix_dashboard_config_plugins_default:
  - api-breaker
  - authz-casbin
  - authz-casdoor
  - authz-keycloak
  - aws-lambda
  - azure-functions
  - basic-auth
  # - batch-requests
  - clickhouse-logger
  - client-control
  - consumer-restriction
  - cors
  - csrf
  - datadog
  # - dubbo-proxy
  - echo
  - error-log-logger
  # - example-plugin
  - ext-plugin-post-req
  - ext-plugin-post-resp
  - ext-plugin-pre-req
  - fault-injection
  - file-logger
  - forward-auth
  - google-cloud-logging
  - grpc-transcode
  - grpc-web
  - gzip
  - hmac-auth
  - http-logger
  - ip-restriction
  - jwt-auth
  - kafka-logger
  - kafka-proxy
  - key-auth
  - ldap-auth
  - limit-conn
  - limit-count
  - limit-req
  - loggly
  # - log-rotate
  - mocking
  # - node-status
  - opa
  - openid-connect
  - opentelemetry
  - openwhisk
  - prometheus
  - proxy-cache
  - proxy-control
  - proxy-mirror
  - proxy-rewrite
  - public-api
  - real-ip
  - redirect
  - referer-restriction
  - request-id
  - request-validation
  - response-rewrite
  - rocketmq-logger
  - server-info
  - serverless-post-function
  - serverless-pre-function
  - skywalking
  - skywalking-logger
  - sls-logger
  - splunk-hec-logging
  - syslog
  - tcp-logger
  - traffic-split
  - ua-restriction
  - udp-logger
  - uri-blocker
  - wolf-rbac
  - zipkin
  - elasticsearch-logge
  - openfunction
  - tencent-cloud-cls
  - ai
  - cas-auth
apisix_dashboard_config_plugins_auto: []
apisix_dashboard_config_plugins_custom: []

# Default APISIX Dashboard configuration template which covers the generic use case.
# You can customize it by controlling the various variables inside it.
#
# For a more advanced customization, you can extend the default (see `apisix_dashboard_config_extension_yaml`)
# or completely replace this variable with your own template.
apisix_dashboard_config_yaml: "{{ lookup('template', 'templates/config.yaml.j2') }}"

apisix_dashboard_config_extension_yaml: |
  # Your custom YAML configuration for APISIX Dashboard goes here.
  # This configuration extends the default starting configuration (`apisix_dashboard_config_yaml`).
  #
  # You can override individual variables from the default configuration, or introduce new ones.
  #
  # If you need something more special, you can take full control by
  # completely redefining `apisix_dashboard_config_yaml`.
  #
  # Example configuration extension follows:
  #
  # apisix:
  #   enable_admin_cors: false

apisix_dashboard_config_extension: "{{ apisix_dashboard_config_extension_yaml | from_yaml if apisix_dashboard_config_extension_yaml | from_yaml is mapping else {} }}"

# Holds the final APISIX Dashboard configuration (a combination of the default and its extension).
# You most likely don't need to touch this variable. Instead, see `apisix_dashboard_config_yaml`.
apisix_dashboard_config: "{{ apisix_dashboard_config_yaml | from_yaml | combine(apisix_dashboard_config_extension, recursive=True) }}"
